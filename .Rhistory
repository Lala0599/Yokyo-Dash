if (method == "R")
return(.fromJSON_R(json_str))
if (method != "C")
stop("only R or C method allowed")
x <- .Call("fromJSON", json_str, unexpected.escape, simplify,
PACKAGE = "rjson")[[1]]
if (any(class(x) == "try-error"))
stop(x)
return(x)
}
freegeoip(ip_list)
install.packages("ipstack")
install.packages("request")
library(rgeolocate)
ip_list= df$IP
location<- "http://api.ipstack.com/(ip_list)?access_key=98c5b82231b0c3d23f964da5ad487f5b"
location
ip_list= df$IP
access_key= 98c5b82231b0c3d23f964da5ad487f5b
access_key= '98c5b82231b0c3d23f964da5ad487f5b'
library(httr)
library(tibble)
library(purrr)
library(jsonlite)
ip_locate <- function(ip_list, access_key) {
ip <- your_vector_of_ip_addresses
map_df(ip, ~{
out <- httr::GET(url = paste0("http://api.ipstack.com/", .,
"?access_key=", access_key))
resp <- fromJSON(httr::content(out, "text"), flatten = TRUE)
tibble::tibble(ip = resp$ip,
country = resp$country_name,
region = resp$region_name,
city = resp$city,
zip = resp$zip,
lat = resp$latitude,
lng = resp$longitude)
})
}
ip_info<- ip_locate(ip_list, access_key)
'98c5b82231b0c3d23f964da5ad487f5b'
ip_info<- ip_locate(your_vector_of_ip_addresses= ip_list, access_key= '98c5b82231b0c3d23f964da5ad487f5b')
ip_lst= df$IP
accesskey= '98c5b82231b0c3d23f964da5ad487f5b'
ip_locate <- function(ip_lst, accesskey) {
ip <- your_vector_of_ip_addresses
map_df(ip, ~{
out <- httr::GET(url = paste0("http://api.ipstack.com/", .,
"?access_key=", accesskey))
resp <- fromJSON(httr::content(out, "text"), flatten = TRUE)
tibble::tibble(ip = resp$ip,
country = resp$country_name,
region = resp$region_name,
city = resp$city,
zip = resp$zip,
lat = resp$latitude,
lng = resp$longitude)
})
}
ip_info<- ip_locate(your_vector_of_ip_addresses= ip_lst, access_key= '98c5b82231b0c3d23f964da5ad487f5b')
ip_info<- ip_locate(your_vector_of_ip_addresses= ip_lst, access_key= accesskey)
library(flexdashboard)
library(shiny)
library(tidyr)
library(lubridate)
library(dplyr)
library(ApacheLogProcessor)
library(stringr)
df <- read.delim("C:/Users/Admin/Desktop/cet333/CET333 Laone Tsheole/logfile1.txt")
colnames(df)<-c("IP", "Time","URL", "Status")
#preprocessing
#separating date and time column
df= df%>% mutate(Time = dmy_hms(Time))
df$Date <- NA
df$Date <- format(as.POSIXct(df$Time, format= "%Y:%M:%D %H:%M:%S"),"%Y:%M:%D")
df$Time<-  format(as.POSIXct(df$Time, format= "%Y:%M:%D %H:%M:%S"),"%H:%M:%S")
#separating method from URL
df$Method<- NA
df$Method<- clear.urls(df$URL, remove_http_method = FALSE)
sub("/.", " ", df$Method)
df$Method= str_extract(df$Method, "GET|POST")
#preprocessing
#separating date and time column
df= df%>% mutate(Time = dmy_hms(Time))
df$Date <- NA
df$Date <- format(as.POSIXct(df$Time, format= "%Y:%M:%D %H:%M:%S"),"%Y:%M:%D")
df$Time<-  format(as.POSIXct(df$Time, format= "%Y:%M:%D %H:%M:%S"),"%H:%M:%S")
#separating method from URL
df$Method<- NA
df$Method<- clear.urls(df$URL, remove_http_method = FALSE)
df$Method= str_extract(df$Method, "GET|POST")
library(flexdashboard)
library(shiny)
library(tidyr)
library(lubridate)
library(dplyr)
library(ApacheLogProcessor)
library(stringr)
df <- read.delim("C:/Users/Admin/Desktop/cet333/CET333 Laone Tsheole/logfile1.txt")
colnames(df)<-c("IP", "Time","URL", "Status")
#preprocessing
#separating date and time column
df= df%>% mutate(Time = dmy_hms(Time))
df$Date <- NA
df$Date <- format(as.POSIXct(df$Time, format= "%Y:%M:%D %H:%M:%S"),"%Y:%M:%D")
df$Time<-  format(as.POSIXct(df$Time, format= "%Y:%M:%D %H:%M:%S"),"%H:%M:%S")
#separating method from URL
df$Method<- NA
df$Method<- clear.urls(df$URL, remove_http_method = FALSE)
df$Method= str_extract(df$Method, "GET|POST")
library(DT)
library(flexdashboard)
library(shiny)
library(tidyr)
library(lubridate)
library(dplyr)
library(ApacheLogProcessor)
library(stringr)
library(DT)
req(input$file1)
fileInput("file1", "Choose CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
fileInput("file1", "Choose CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv"))
req(input$file1)
input("file1", "Choose CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv"))
a= df$Status
status = as.data.frame(a)
status
a= table(df$Status)
a
status = as.data.frame(a)
status
names(status)[1] = "status"
status
setDT(status)
library(DT)
setDT(status)
datatable(status)
renderDataTable({
a= table(df$Status)
status = as.data.frame(a)
names(status)[1] = "status"
datatable(status)
})
devtools::install_github("ironholds/rgeolocate")
library(ip2location)
get_all(df$IP)
Y
location_df<- get_all(df$IP)
maxmind(
ips = df$IP,
file = "./location_db.csv",
fields = c("lat", "long", "country_name")
)
ip2location(
ips = df$IP,
file = "./location_db.csv",
fields = c("lat", "long", "country_name")
)
ip2location::open("~/IP-COUNTRY-REGION-CITY-LATITUDE-LONGITUDE-ZIPCODE-TIMEZONE-ISP-DOMAIN-NETSPEED-AREACODE-WEATHER-MOBILE-ELEVATION-USAGETYPE-SAMPLE.BIN")
install.packages("reticulate")
library(reticulate)
py_run_string("import IP2Location")
library(reticulate)
py_run_string("import IP2Location")
library(reticulate)
py_run_string("import IP2Location")
reticulate::py_config()
reticulate::py_config()
library(flexdashboard)
library(shiny)
library(tidyr)
library(lubridate)
library(dplyr)
library(ApacheLogProcessor)
library(stringr)
library(DT)
library(ggplot2)
library(ggmap)
requests = as.data.frame(table(format(df$Date, "%d")))
requests = as.data.frame(table(format(df$Date, "%d")))
ggplot(data= requests, aes(x=Var1, y=Freq, group=1)) +
geom_line() + xlab('Day of month') + ylab('No of requests')
requests = as.data.frame(table(format(df$Date, "%d")))
#preprocessing
#separating date and time column
df= df%>% mutate(Time = dmy_hms(Time))
df$Date <- NA
df$Date <- format(as.POSIXct(df$Time, format= "%Y:%M:%D %H:%M:%S"),"%Y:%M:%D")
df$Date<-sub(".*:", " ", df$Date)
df$Date<-mdy(df$Date)
df$Time<-  format(as.POSIXct(df$Time, format= "%Y:%M:%D %H:%M:%S"),"%H:%M:%S")
#separating method from URL
df$Method<- NA
df$Method<- clear.urls(df$URL, remove_http_method = FALSE)
df$Method= str_extract(df$Method, "GET|POST")
#clean urls
df$URL<- clear.urls(df$URL, remove_http_method = TRUE)
library(flexdashboard)
library(shiny)
library(tidyr)
library(lubridate)
library(dplyr)
library(ApacheLogProcessor)
library(stringr)
library(DT)
library(ggplot2)
library(ggmap)
df <- read.delim("./logfile1.txt")
colnames(df)<-c("IP", "Time","URL", "Status")
#preprocessing
#separating date and time column
df= df%>% mutate(Time = dmy_hms(Time))
df$Date <- NA
df$Date <- format(as.POSIXct(df$Time, format= "%Y:%M:%D %H:%M:%S"),"%Y:%M:%D")
df$Date<-sub(".*:", " ", df$Date)
df$Date<-mdy(df$Date)
df$Time<-  format(as.POSIXct(df$Time, format= "%Y:%M:%D %H:%M:%S"),"%H:%M:%S")
#separating method from URL
df$Method<- NA
df$Method<- clear.urls(df$URL, remove_http_method = FALSE)
df$Method= str_extract(df$Method, "GET|POST")
#clean urls
df$URL<- clear.urls(df$URL, remove_http_method = TRUE)
requests = as.data.frame(table(format(df$Date, "%d")))
ggplot(data= requests, aes(x=Var1, y=Freq, group=1)) +
geom_line() + xlab('Day of month') + ylab('No of requests')
renderPlot({
requests = as.data.frame(table(format(df$Date, "%d")))
ggplot(data= requests, aes(x=Var1, y=Freq, group=1)) +
geom_line() + xlab('Day of month') + ylab('No of requests')
})
library(reticulate)
py_run_string("import IP2Location")
py_run_string("IP2LocObj = IP2Location.IP2Location()")
py_run_string("IP2LocObj.open('location_db.csv')")
IP2LocObj.get_all(df$IP)
ip<- df$IP
py_run_string("rec = IP2LocObj.get_all(ip)")
py_run_string("ip= df.IP")
py_run_string(ip2location(
ips = df$IP,
file = "./location_db.csv",
fields = c("lat", "long", "country_name")
))
ip
py_run_string("rec = IP2LocObj.get_all('10.128.2.1')")
py_run_string("IP2LocObj.open('IP2LOCATION-LITE-DB5.BIN')")
py_run_string("rec = IP2LocObj.get_all('10.128.2.1')")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
ip
py_run_string("rec = IP2LocObj.get_all('5.59.180.0')")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('10.129.2.1')")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("IP2LocObj.open('IP2LOCATION-LITE-DB5.IPV6.BIN')")
py_run_string("rec = IP2LocObj.get_all('10.129.2.1')")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
daf <- read.delim("C:/Users/Admin/Desktop/cet333/CET333 Laone Tsheole/logfile.txt")
colnames(daf)<-c("IP", "Time","URL", "Status")
View(daf)
py_run_string("rec = IP2LocObj.get_all('1.560.185.329')")
py_run_string("IP2LocObj.open('IP2LOCATION-LITE-DB5.BIN')")
py_run_string("rec = IP2LocObj.get_all('1.560.185.329')")
py_run_string("rec = IP2LocObj.get_all('129.956.716')")
py_run_string("rec = IP2LocObj.get_all('111.101.66.248')")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('101.168.78.59')")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('101.168.78.59')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
df <- read.delim("./logfile.txt")
colnames(df)<-c("IP", "Time","URL", "Status")
#preprocessing
#separating date and time column
df= df%>% mutate(Time = dmy_hms(Time))
df$Date <- NA
df$Date <- format(as.POSIXct(df$Time, format= "%Y:%M:%D %H:%M:%S"),"%Y:%M:%D")
df$Date<-sub(".*:", " ", df$Date)
df$Date<-mdy(df$Date)
df$Time<-  format(as.POSIXct(df$Time, format= "%Y:%M:%D %H:%M:%S"),"%H:%M:%S")
#separating method from URL
df$Method<- NA
df$Method<- clear.urls(df$URL, remove_http_method = FALSE)
df$Method= str_extract(df$Method, "GET|POST")
#clean urls
df$URL<- clear.urls(df$URL, remove_http_method = TRUE)
location_df<- get_all(df$IP)
library(ip2location)
py_run_string("import IP2Location")
help(ip2location)
address = paste("rec = data.get_all('", df$IP, "')", sep= "")
py_run_string(address)
py_run_file(address)
ip_lst= table(df$Status)
status = as.data.frame(ip_lst)
renderDataTable({
a= table(df$Status)
status = as.data.frame(a)
names(status)[1] = "status"
datatable(status)
})
ip_lst= table(df$Status)
ip_lst = as.data.frame(ip_lst)
ip_lst
ip_lst= table(df$IP)
ip_lst = as.data.frame(ip_lst)
ip_lst
names(ip_lst)[1] = "IP"
ip_lst
ip_lst$Country <- NA
ip_lst$Country<- lapply(ip_lst[IP],get_all())
ip_lst$Country<- lapply(ip_lst[IP],get_all(x))
x<- ip_lst$IP
ip_lst$Country<- lapply(ip_lst[IP],get_all(x))
x %>% group_by(x) %>% summarize(seq = paste0(x, collapse = ""))
toString(x)
ip_lst$Country<- lapply(ip_lst[IP],get_all(x))
class(x)
ip_lst$Country<- lapply(ip_lst[IP],get_all(x))
ip_lst$Country<- lapply(get_all(ip_lst[IP]))
ip_lst$Country<- lapply(get_all(ip_lst[IP]), FUN = get_all())
ip_lst$Country<- lapply(get_all(ip_lst[IP]), FUN)
ip_lst$Country<- lapply(get_all(ip_lst[IP]))
ip_lst$Country<- lapply((ip_lst[IP]), FUN= get_all())
py_run_string("rec = IP2LocObj.get_all('101.168.78.59')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.longitude)")
ip_lst$Country<-py_run_string("print(rec.country_long)")
py_run_string("rec = IP2LocObj.get_all('101.168.78.59')")
ip_lst$Country<-py_run_string("print(rec.country_long)")
ip_lst$Lat<-py_run_string("print(rec.latitude)")
ip_lst$Long<-py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('101.168.78.59')")
a<-py_run_string("print(rec.country_long)")
b<-py_run_string("print(rec.latitude)")
c<-py_run_string("print(rec.longitude)")
install.packages("lambda.r")
lapply(ip_list, get_all)
lapply(x, get_all)
x<- ip_lst$IP
lapply(x, get_all())
ip_lst
lapply(x, get_all("111.101.66.248"))
lapply(ip_lst$IP, get_all("111.101.66.248"))
lapply(ip_lst$IP, get_all('111.101.66.248'))
py_run_string("import IP2Location")
py_run_string("IP2LocObj = IP2Location.IP2Location()")
py_run_string("IP2LocObj.open('IP2LOCATION-LITE-DB5.BIN')")
lapply(ip_lst$IP, get_all('111.101.66.248'))
lapply(ip_lst$IP, get_all('111.101.66.248'))
py_run_string("rec = IP2LocObj.get_all('101.168.78.59')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
lapply(ip_lst$IP, get_all('111.101.66.248'))
py_run_string(lapply(ip_lst$IP, get_all('111.101.66.248')))
py_run_string(lapply(x= ip_lst$IP, FUN= get_all('111.101.66.248')))
install.packages("plotly")
library(ggplotly)
library(reticulate)
library(ip2location)
py_run_string("import IP2Location")
py_run_string("IP2LocObj = IP2Location.IP2Location()")
py_run_string("IP2LocObj.open('IP2LOCATION-LITE-DB5.BIN')")
py_run_string("rec = IP2LocObj.get_all('101.168.78.59')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
ip_lst= table(df$IP)
ip_lst = as.data.frame(ip_lst)
names(ip_lst)[1] = "IP"
ip_lst
py_run_string("rec = IP2LocObj.get_all('111.101.66.248')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('115.14.56.140')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('118.206.244.2')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('119.220.210.247')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('131.41.78.243')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('177.147.139.228')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('185.124.38.12')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('201.175.225.161')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('241.91.16.200')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('69.96.155.21')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('79.202.86.209')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('84.146.117.229')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('91.68.162.55')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
py_run_string("rec = IP2LocObj.get_all('94.164.200.219')")
py_run_string("print(rec.country_long)")
py_run_string("print(rec.latitude)")
py_run_string("print(rec.longitude)")
ip<- c("101.168.78.59", "111.101.66.248", "115.14.56.140", "118.206.244.2", "119.220.210.247", "131.41.78.243", "177.147.139.228", "185.124.38.12", "201.175.225.161", "241.91.16.200", "69.96.155.21", "79.202.86.209", "84.146.117.229", "91.68.162.55", "94.164.200.219")
country<-c("Australia", "Japan", "Korea (Republic of)", "China", "Korea (Republic of)", "United States of America", "Brazil", "Spain", "Mexico", "No name", "United States of America", "Germany","Germany", "France", "Italy")
lat<-c("-37.813999", "35.689507", "37.56826", "28.200001", "37.56826", "39.966381", "-18.165831", "40.4165", "19.417219", "0.0", "40.735661", "53.059631", "51.5", "48.853409", "44.22361")
long<-c("144.963318", "139.691696", "126.977829", "112.966667", "126.977829", "-83.012772", "-47.946388", "-3.70256", "-99.156937", "0.0", "-74.172371", "14.28154", "12.0", "2.3488", "12.05278")
df_location<- data.frame(ip, country, lat, long)
View(df_location)
ip_lst = as.data.frame(ip_lst)
names(df_location)<- c("IP", "Country", "Latitude", "Longitude")
View(df_location)
locdf<- merge(df_location, ip_lst, by= "IP")
View(locdf)
library(leaflet)
library(leaflet)
leaflet(locdf) %>% addTiles() %>%
addCircleMarkers(lng= ~Longitude, lat = ~Latitude, popup = ~Country, ~Freq)
class(locdf$Latitude)
strtoi(locdf$Latitude)
p<- c("101.168.78.59", "111.101.66.248", "115.14.56.140", "118.206.244.2", "119.220.210.247", "131.41.78.243", "177.147.139.228", "185.124.38.12", "201.175.225.161", "241.91.16.200", "69.96.155.21", "79.202.86.209", "84.146.117.229", "91.68.162.55", "94.164.200.219")
country<-c("Australia", "Japan", "Korea (Republic of)", "China", "Korea (Republic of)", "United States of America", "Brazil", "Spain", "Mexico", "No name", "United States of America", "Germany","Germany", "France", "Italy")
lat<-c("-37.813999", "35.689507", "37.56826", "28.200001", "37.56826", "39.966381", "-18.165831", "40.4165", "19.417219", "0.0", "40.735661", "53.059631", "51.5", "48.853409", "44.22361")
long<-c("144.963318", "139.691696", "126.977829", "112.966667", "126.977829", "-83.012772", "-47.946388", "-3.70256", "-99.156937", "0.0", "-74.172371", "14.28154", "12.0", "2.3488", "12.05278")
ip_lst= table(df$IP)
ip_lst = as.data.frame(ip_lst)
names(ip_lst)[1] = "IP"
names(ip_lst)[1] = "IP"
df_location<- data.frame(ip, country, lat, long)
names(df_location)<- c("IP", "Country", "Latitude", "Longitude")
View(df_location)
locdf<- merge(df_location, ip_lst, by= "IP")
View(locdf)
df_location<- data.frame(ip, country, as.integer(lat), as.integer(long))
View(df_location)
ip<- c("101.168.78.59", "111.101.66.248", "115.14.56.140", "118.206.244.2", "119.220.210.247", "131.41.78.243", "177.147.139.228", "185.124.38.12", "201.175.225.161", "241.91.16.200", "69.96.155.21", "79.202.86.209", "84.146.117.229", "91.68.162.55", "94.164.200.219")
country<-c("Australia", "Japan", "Korea (Republic of)", "China", "Korea (Republic of)", "United States of America", "Brazil", "Spain", "Mexico", "No name", "United States of America", "Germany","Germany", "France", "Italy")
lat<-c("-37.813999", "35.689507", "37.56826", "28.200001", "37.56826", "39.966381", "-18.165831", "40.4165", "19.417219", "0.0", "40.735661", "53.059631", "51.5", "48.853409", "44.22361")
long<-c("144.963318", "139.691696", "126.977829", "112.966667", "126.977829", "-83.012772", "-47.946388", "-3.70256", "-99.156937", "0.0", "-74.172371", "14.28154", "12.0", "2.3488", "12.05278")
df_location<- data.frame(ip, country, as.numeric(lat), as.numeric(long))
View(df_location)
names(df_location)<- c("IP", "Country", "Latitude", "Longitude")
locdf<- merge(df_location, ip_lst, by= "IP")
View(locdf)
class(locdf$Latitude)
library(leaflet)
leaflet(locdf) %>% addTiles() %>%
addCircleMarkers(lng= ~Longitude, lat = ~Latitude, popup = ~Country, ~Freq)
leaflet(locdf) %>% addTiles() %>%
addCircleMarkers(radius= 0.5,lng= ~Longitude, lat = ~Latitude, popup = ~Country, ~Freq)
library(flexdashboard)
library(shiny)
library(tidyr)
library(lubridate)
library(dplyr)
library(ApacheLogProcessor)
library(stringr)
library(DT)
library(plotly)
library(leaflet)
library(ggplot2)
#ip addresses to geo location using python module IP2location
library(reticulate)
library(ip2location)
py_run_string("import IP2Location")
py_run_string("IP2LocObj = IP2Location.IP2Location()")
py_run_string("IP2LocObj.open('IP2LOCATION-LITE-DB5.BIN')")
